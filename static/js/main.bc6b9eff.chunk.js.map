{"version":3,"sources":["redux/thunks/itemsThunk.ts","redux/slices/itemsSlice.ts","redux/store.ts","redux/hooks.ts","components/Item.tsx","components/Chart.tsx","components/Table.tsx","App.tsx","index.tsx"],"names":["fetchItems","createAsyncThunk","_","thunkApi","a","data","fetch","request","ok","Error","statusText","json","items","console","log","rejectWithValue","itemAdapter","createEntityAdapter","selectId","entity","id","initialState","getInitialState","pending","itemsSlice","createSlice","name","reducers","extraReducers","builder","addCase","fulfilled","state","action","upsertMany","payload","rejected","selectItemById","getSelectors","selectById","store","configureStore","reducer","useAppSelector","useSelector","StyledDivider","styled","Divider","width","CenteredGridItem","Grid","display","justifyContent","Item","itemId","item","Paper","sx","height","container","direction","alignItems","spacing","src","image","alt","style","Typography","variant","fontWeight","title","opacity","textAlign","subtitle","marginTop","marginBottom","tags","map","tag","Chip","size","label","borderRadius","memo","Chart","options","useMemo","keys","salesData","sales","align","text","series","key","index","marker","enabled","color","type","sale","x","Date","weekEnding","getTime","y","yAxis","labels","xAxis","dateTimeLabelFormats","month","textTransform","legend","highcharts","Highcharts","HeaderCell","MuiCell","TableCell","CustomTable","TableContainer","component","Table","TableHead","TableRow","TableBody","border","scope","XDate","toString","retailSales","toLocaleString","wholesaleSales","unitsSold","retailerMargin","theme","createTheme","palette","primary","main","background","default","App","dispatch","useDispatch","useEffect","ThemeProvider","AppBar","position","Toolbar","padding","xs","Server","routes","this","namespace","get","require","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bc6b9eff.chunk.js","sourcesContent":["import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { Item } from \"../types/itemTypes\";\n\nexport const fetchItems = createAsyncThunk<\n  Item[],\n  void,\n  { rejectValue: Error }\n>(\"items/fetchItems\", async (_: void, thunkApi) => {\n  let data: Item[] = [];\n  try {\n    const request = await fetch(\"/api/items\");\n    if (!request.ok) throw Error(request.statusText);\n\n    const json: { items: Item[] } = await request.json();\n    data = json.items;\n  } catch (e) {\n    console.log(e);\n    thunkApi.rejectWithValue(e as Error);\n  }\n  debugger;\n  return data;\n});\n","import {\n  createEntityAdapter,\n  createSlice,\n  EntityAdapter,\n  EntityState,\n} from \"@reduxjs/toolkit\";\nimport { RootState } from \"../store\";\nimport { Item } from \"../types/itemTypes\";\nimport { fetchItems } from \"../thunks/itemsThunk\";\n\nconst itemAdapter: EntityAdapter<Item> = createEntityAdapter<Item>({\n  selectId: (entity: Item) => entity.id,\n});\n\ntype AdditionalState = { pending: boolean };\ntype Action<T> = { type: string; payload: T };\ntype ItemState = EntityState<Item> & AdditionalState;\n\nconst initialState: ItemState = itemAdapter.getInitialState<AdditionalState>({\n  pending: false,\n});\n\nconst itemsSlice = createSlice({\n  name: \"items\",\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(\n      fetchItems.fulfilled,\n      (state: ItemState, action: Action<Item[]>) => {\n        itemAdapter.upsertMany(state, action.payload);\n        state.pending = false;\n      }\n    );\n    builder.addCase(fetchItems.pending, (state: ItemState) => {\n      state.pending = true;\n    });\n    builder.addCase(fetchItems.rejected, (state: ItemState) => {\n      state.pending = false;\n    });\n  },\n});\n\nexport const { selectById: selectItemById } = itemAdapter.getSelectors(\n  (state: RootState) => state.itemsSlice\n);\n\nexport default itemsSlice.reducer;\n","import { configureStore, ThunkAction, Action } from \"@reduxjs/toolkit\";\nimport itemsSlice from \"./slices/itemsSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    itemsSlice,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React, { FC, memo } from \"react\";\nimport { styled } from \"@mui/system\";\nimport { Paper, Typography, Grid, Divider, Chip } from \"@mui/material\";\n\nimport { useAppSelector } from \"../redux/hooks\";\nimport { selectItemById } from \"../redux/slices/itemsSlice\";\n\nconst StyledDivider = styled(Divider)({\n  width: \"100%\",\n});\nconst CenteredGridItem = styled(Grid)({\n  width: \"100%\",\n  display: \"flex\",\n  justifyContent: \"center\",\n});\n\ninterface Props {\n  itemId: string;\n}\nconst Item: FC<Props> = ({ itemId }) => {\n  const item = useAppSelector((state) => selectItemById(state, itemId));\n\n  return (\n    <Paper\n      sx={{\n        height: \"100%\",\n        width: \"100%\",\n      }}\n    >\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={1}>\n        <CenteredGridItem item>\n          <img src={item?.image} alt=\"\" style={{ width: \"60%\" }} />\n        </CenteredGridItem>\n        <Grid item container direction=\"column\" alignItems=\"center\" spacing={1}>\n          <Grid item>\n            <Typography variant=\"h6\" sx={{ fontWeight: \"bold\" }}>\n              {item?.title}\n            </Typography>\n          </Grid>\n          <CenteredGridItem item>\n            <Typography\n              variant=\"body2\"\n              sx={{ opacity: \"50%\", textAlign: \"center\", width: \"80%\" }}\n            >\n              {item?.subtitle}\n            </Typography>\n          </CenteredGridItem>\n        </Grid>\n        <CenteredGridItem item>\n          <StyledDivider />\n        </CenteredGridItem>\n        <Grid\n          item\n          container\n          spacing={1}\n          sx={{ width: \"90%\", marginTop: 1, marginBottom: 1 }}\n        >\n          {item?.tags.map((tag) => (\n            <Grid item key={tag}>\n              <Chip\n                variant=\"outlined\"\n                size=\"small\"\n                label={tag}\n                sx={{ borderRadius: 1 }}\n              />\n            </Grid>\n          ))}\n        </Grid>\n        <CenteredGridItem item>\n          <StyledDivider />\n        </CenteredGridItem>\n      </Grid>\n    </Paper>\n  );\n};\n\nexport default memo(Item);\n","import React, { FC, memo, useMemo } from \"react\";\nimport { Paper } from \"@mui/material\";\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\n\nimport { useAppSelector } from \"../redux/hooks\";\nimport { selectItemById } from \"../redux/slices/itemsSlice\";\nimport { Sale } from \"../redux/types/itemTypes\";\n\n// Chart configuration options. Memoized to avoided recomputation.\nconst makeOptions = (\n  keys: (keyof Sale)[],\n  salesData?: Sale[]\n): Highcharts.Options => ({\n  title: {\n    align: \"left\",\n    text: \"Retail Sales\",\n  },\n  series: keys.map((key, index) => ({\n    marker: {\n      enabled: false,\n    },\n    color: [\"#42a6f6\", \"#9ba6bf\"][index % 2],\n    name: key,\n    type: \"spline\",\n    data: salesData?.map((sale) => ({\n      x: new Date(sale.weekEnding).getTime(),\n      y: sale?.[key] as number,\n    })),\n  })),\n  yAxis: {\n    title: { text: null },\n    labels: {\n      enabled: false,\n    },\n  },\n  xAxis: {\n    title: { text: null },\n    type: \"datetime\",\n    dateTimeLabelFormats: {\n      month: \"%b\",\n    },\n    labels: {\n      style: {\n        textTransform: \"uppercase\",\n        color: \"rgba(0,0,0,0.4)\",\n      },\n    },\n  },\n  legend: {\n    enabled: false,\n  },\n});\n\ninterface Props {\n  itemId: string;\n}\n\nconst Chart: FC<Props> = ({ itemId }) => {\n  const item = useAppSelector((state) => selectItemById(state, itemId));\n  const options = useMemo(\n    () => makeOptions([\"retailSales\", \"retailerMargin\"], item?.sales),\n    [item]\n  );\n\n  return (\n    <Paper sx={{ height: \"100%\", width: \"100%\" }}>\n      <HighchartsReact highcharts={Highcharts} options={options} />\n    </Paper>\n  );\n};\n\nexport default memo(Chart);\n","import React, { FC, memo } from \"react\";\nimport { styled } from \"@mui/system\";\nimport XDate from \"xdate\";\nimport {\n  Paper,\n  Table,\n  TableBody,\n  TableCell as MuiCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n} from \"@mui/material\";\n\nimport { selectItemById } from \"../redux/slices/itemsSlice\";\nimport { useAppSelector } from \"../redux/hooks\";\n\nconst HeaderCell = styled(MuiCell)({\n  color: \"rgba(1,1,1,0.8)\",\n});\nconst TableCell = styled(MuiCell)({\n  color: \"rgba(1,1,1,0.5)\",\n});\n\ninterface Props {\n  itemId: string;\n}\n\nconst CustomTable: FC<Props> = ({ itemId }) => {\n  const item = useAppSelector((state) => selectItemById(state, itemId));\n\n  return (\n    <Paper>\n      <TableContainer component={Paper}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <HeaderCell>WEEK ENDING</HeaderCell>\n              <HeaderCell align=\"right\">RETAIL SALES</HeaderCell>\n              <HeaderCell align=\"right\">WHOLESALE SALES</HeaderCell>\n              <HeaderCell align=\"right\">UNITS SOLD</HeaderCell>\n              <HeaderCell align=\"right\">RETAILER MARGIN</HeaderCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {item?.sales.map((sale) => (\n              <TableRow\n                key={sale.weekEnding}\n                sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\n              >\n                <TableCell component=\"th\" scope=\"row\">\n                  {new XDate(sale.weekEnding).toString(\"MM-dd-yy\")}\n                </TableCell>\n                <TableCell align=\"right\">\n                  ${sale.retailSales.toLocaleString()}\n                </TableCell>\n                <TableCell align=\"right\">\n                  ${sale.wholesaleSales.toLocaleString()}\n                </TableCell>\n                <TableCell align=\"right\">\n                  {sale.unitsSold.toLocaleString()}\n                </TableCell>\n                <TableCell align=\"right\">\n                  ${sale.retailerMargin.toLocaleString()}\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Paper>\n  );\n};\n\nexport default memo(CustomTable);\n","import React, { FC, memo, useEffect } from \"react\";\nimport {\n  createTheme,\n  Grid,\n  Toolbar,\n  AppBar,\n  ThemeProvider,\n} from \"@mui/material\";\n\nimport Item from \"./components/Item\";\nimport Chart from \"./components/Chart\";\nimport Table from \"./components/Table\";\n\nimport { useAppDispatch } from \"./redux/hooks\";\nimport { fetchItems } from \"./redux/thunks/itemsThunk\";\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: \"#072d4c\",\n    },\n    background: {\n      default: \"#f6f8fa\",\n    },\n  },\n});\n\nconst App: FC = () => {\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    dispatch(fetchItems());\n  }, [dispatch]);\n\n  // I built this app as if there would be many items, but since there's just\n  // one, I'm passing the components a hard-coded Id.\n  const itemId = \"B007TIE0GQ\";\n\n  return (\n    <ThemeProvider theme={theme}>\n      <AppBar position=\"sticky\">\n        <Toolbar\n          sx={{\n            height: 50,\n          }}\n        >\n          <img src=\"stackline_logo.svg\" alt=\"\" style={{ height: \"60%\" }} />\n        </Toolbar>\n      </AppBar>\n      <Grid container spacing={2} sx={{ padding: 2 }}>\n        <Grid item container xs={3}>\n          <Item itemId={itemId} />\n        </Grid>\n        <Grid item container xs={9} spacing={2} direction=\"column\">\n          <Grid item>\n            <Chart itemId={itemId} />\n          </Grid>\n          <Grid item>\n            <Table itemId={itemId} />\n          </Grid>\n        </Grid>\n      </Grid>\n    </ThemeProvider>\n  );\n};\n\nexport default memo(App);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { store } from \"./redux/store\";\nimport { Provider } from \"react-redux\";\nimport App from \"./App\";\n\nimport { Server } from \"miragejs\";\nimport { Item } from \"./redux/types/itemTypes\";\n\n// fake api server\nexport default new Server({\n  routes() {\n    this.namespace = \"api\";\n    this.get(\"/items/\", (): { items: Item[] } => {\n      const data: Item[] = require(\"./stackline_frontend_assessment_data_2021.json\");\n      return { items: data };\n    });\n  },\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}